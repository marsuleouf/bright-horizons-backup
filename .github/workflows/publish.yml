name: Publish

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write     # required for PyPI Trusted Publishing (OIDC)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Verify tag matches project version
        run: |
          python - <<'PY'
          import os, sys
          import tomllib
          # Read version from pyproject.toml
          with open("pyproject.toml","rb") as f:
              ver = tomllib.load(f).get("project", {}).get("version")
          if not ver:
              print("No [project].version found in pyproject.toml", file=sys.stderr)
              sys.exit(1)
          
          # Tag from the release event
          tag = os.environ["TAG_NAME"]
          # Allow a leading 'v' in the tag
          tag_norm = tag[1:] if tag.startswith("v") else tag
          
          if ver != tag_norm:
              print(f"Project version ({ver}) doesn't match tag ({tag})", file=sys.stderr)
              sys.exit(1)
          PY
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true

      - name: Build (sdist & wheel)
        run: uv build

      - name: Upload dist as artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          if-no-files-found: error

      # OIDC-based publish (no token needed). Enable Trusted Publishing on PyPI first.
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          # repository-url: https://test.pypi.org/legacy/  # <-- uncomment to publish to TestPyPI
